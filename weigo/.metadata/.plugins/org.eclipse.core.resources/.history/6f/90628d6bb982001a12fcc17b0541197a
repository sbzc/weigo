package com.weigo.shiro;


import java.util.Date;

import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.session.Session;
import org.apache.shiro.subject.Subject;
import org.apache.shiro.web.filter.authc.FormAuthenticationFilter;
import org.apache.shiro.web.util.WebUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.StringRedisSerializer;

import com.weigo.commons.utils.IDUtils;
import com.weigo.commons.utils.MyUserAgentUtils;
import com.weigo.mapper.TbUserLoginMapper;
import com.weigo.pojo.TbUser;
import com.weigo.pojo.TbUserLogin;
public class MyFormAuthenticationFilter extends FormAuthenticationFilter{
    
	@Autowired
	private RedisTemplate<String, String> redisTemplate;
    @Autowired	
	private TbUserLoginMapper tbUserLoginMapper;
	@Override
	protected boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) {
		
		if(isLoginRequest(request,response)&&isLoginSubmission(request, response)){
            return false;
        }
		
		//从请求中获取Shiro的 主体
				Subject subject = getSubject(request, response);
				//从主体中获取Shiro框架的Session
				Session session = subject.getSession();
				//如果主体没有认证（Session中认证）并且 主体已经设置记住我了
				if (!subject.isAuthenticated() && subject.isRemembered()) {
					//获取主体的身份（从记住我的Cookie中获取的）
					TbUser principal = (TbUser) subject.getPrincipal();
					//将身份认证信息共享到 Session中
					session.setAttribute("loginUser", principal);
					return true;
				}
				//return subject.isAuthenticated() || subject.isRemembered();
		return super.isAccessAllowed(request, response, mappedValue);
	}
	
	@Override
	protected boolean onLoginSuccess(AuthenticationToken token, Subject subject, ServletRequest request,
			ServletResponse response) throws Exception {
		HttpServletRequest req = (HttpServletRequest)(request);
		TbUser principal = (TbUser) subject.getPrincipal();
		String loginKey = "login:"+req.getParameter("username");
	//记录登录信息
		Date date = new Date();
		   TbUserLogin tbUserLogin = new TbUserLogin();
		   tbUserLogin.setId(IDUtils.genItemId());
		   tbUserLogin.setUsername(principal.getUsername());
		   tbUserLogin.setEmail(principal.getEmail());
		   tbUserLogin.setBrowserIp(MyUserAgentUtils.getIp(req));
		   tbUserLogin.setBrowserName(MyUserAgentUtils.getBrowserName(req));
		   tbUserLogin.setBrowserVersion(MyUserAgentUtils.getBrowserVersion(req));
		   tbUserLogin.setOsName(MyUserAgentUtils.getOsName(req));
		   tbUserLogin.setLoginDate(date);
		   tbUserLogin.setLoginDatetime(date);
		   tbUserLoginMapper.insert(tbUserLogin);
		   
		   
		//清除redis缓存数据  
		this.redisTemplate.setValueSerializer(new StringRedisSerializer());
		this.redisTemplate.delete(loginKey);
		HttpSession session = req.getSession();
		String url = (String) session.getAttribute("url");
		if(url!=null&&!"".equals(url)) {
			 WebUtils.getAndClearSavedRequest(request);
			// resp.sendRedirect(url);
			 //成功跳转
			WebUtils.redirectToSavedRequest(request, response, url);
           return false;			
		}else {
			return super.onLoginSuccess(token, subject, request, response);
		}
	}
	
	
	@Override
	protected boolean onAccessDenied(ServletRequest request, ServletResponse response) throws Exception {
		
		HttpServletRequest req = (HttpServletRequest) request;
		String verifyCode = req.getParameter("verifyCode");
		String ip = MyUserAgentUtils.getIp(req);
		System.out.println(ip);
		if(verifyCode==null) {
			if("47.103.218.192".equals(ip)||"172.17.58.17".equals(ip) ) {
				System.out.println("shiro通过了");
				return true;
			}
			
		}
		String rand = (String) req.getSession().getAttribute("rand");
		
		if(StringUtils.isNotEmpty(verifyCode)&&StringUtils.isNotBlank(rand)) {
			if(!rand.equalsIgnoreCase(verifyCode)) {
				req.setAttribute("errorMsg", "验证码错误");
			    req.getRequestDispatcher("/login.jsp").forward(req, response);
				return false; 
			}
			
		}else if("".equals(verifyCode)) {
			req.setAttribute("errorMsg", "验证码不能为空");
		    req.getRequestDispatcher("/login.jsp").forward(req, response);
			return false; 
		}
	   String loginKey = "login:"+req.getParameter("username");
		this.redisTemplate.setValueSerializer(new StringRedisSerializer());
		Boolean hasKey = redisTemplate.hasKey(loginKey);
 		if(hasKey) {
		int count = Integer.parseInt(redisTemplate.opsForValue().get(loginKey));
			if(count>5) {
				req.setAttribute("errorMsg", "错误过多禁用一小时");
			    req.getRequestDispatcher("/login.jsp").forward(req, response);
				return false; 
			}
		}
		
		return super.onAccessDenied(request, response);
	}
	
}
