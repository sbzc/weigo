package com.weigo.user.service.impl;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.shiro.SecurityUtils;
import org.apache.shiro.crypto.hash.Md5Hash;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.github.pagehelper.PageInfo;
import com.weigo.commons.pojo.ConstantObject;
import com.weigo.commons.pojo.MessageObject;
import com.weigo.commons.pojo.UserMessage;
import com.weigo.commons.pojo.VisitorPage;
import com.weigo.commons.pojo.VisitorPageMessage;
import com.weigo.commons.utils.IDUtils;
import com.weigo.dubbo.order.service.TbOrderItemDubboService;
import com.weigo.dubbo.shipping.service.TbOrderShippingDubboService;
import com.weigo.dubbo.user.service.TbEvaluateDubboService;
import com.weigo.dubbo.user.service.TbRoleDubboService;
import com.weigo.dubbo.user.service.TbUserDubboService;
import com.weigo.mail.email.SendEmail;
import com.weigo.manage.pojo.UserSuggestData;
import com.weigo.pojo.TbOrderShipping;
import com.weigo.pojo.TbRole;
import com.weigo.pojo.TbUser;
import com.weigo.user.service.TbUserService;
@Service
public class TbUserServiceImpl implements TbUserService {
    
	@Autowired
	private TbUserDubboService tbUserDubboService;
	
	@Autowired
	private TbRoleDubboService tbRoleDubboService;
	@Autowired
	private TbEvaluateDubboService tbEvaluateDubboService;
	@Autowired
	private TbOrderShippingDubboService tbOrderShippingDubboService;
	@Autowired
	private TbOrderItemDubboService tbOrderItemDubboService;
	
	
	
	@Override
	public PageInfo<TbUser> selectItemByKeyword(String keyword, int pageSize, int pageNum, String sort,
			String sortOrder) {
		if(sort.equals("statusStr")) {
        	sort="status";
        }else if(sort.equals("rolename")) {
        	sort="role_id";
        }
		PageInfo<TbUser> pageInfo = tbUserDubboService.selectTbUserByKeyword(keyword,pageSize,pageNum,sort,sortOrder);
	  List<TbUser> list = pageInfo.getList();
	  for (TbUser tbUser : list) {  
		if(tbUser.getStatus()==1) {
			tbUser.setStatusStr("启用");
		}else {
			tbUser.setStatusStr("禁用");
		}
		TbRole tbRole = tbRoleDubboService.selectRoleNameById(tbUser.getRoleId());
		String rolename = tbRole.getRolename();
		tbUser.setRolename(rolename);
	}
		return pageInfo;
	}

	@Override
	public int selectUserByUsername(String username) {
		TbUser user = tbUserDubboService.selectUserByUsername(username);
		if(user!=null) {
			return 0;
		}
		return 1;
	}

	@Override
	public int insertUserByIbUser(TbUser tbUser) throws Exception {

		Date date = new Date();
		tbUser.setUpdated(date);
		tbUser.setCreated(date);
		tbUser.setStatus(1);
		tbUser.setId(IDUtils.genItemId());
	   	 String salt = UUID.randomUUID().toString().substring(0, 5);
	   	 Md5Hash md5Hash = new Md5Hash(tbUser.getPassword(), salt, 3);
	   	tbUser.setPassword(md5Hash.toString());
	   	tbUser.setSalt(salt);
	   	tbUser.setScore((int) (tbUser.getRoleId()*10));
	    int ok = tbUserDubboService.insertUserByTbUser(tbUser);
	    
	   	return ok;
	}

	@Override
	public TbUser selectUserById(Long id) {
		TbUser tbUser = tbUserDubboService.selectUserById(id);
		TbRole tbRole = this.tbRoleDubboService.selectTbRoleById(tbUser.getRoleId());
		if(tbRole!=null) {
			tbUser.setRolename(tbRole.getRolename());
		}else {
			tbUser.setRolename("还未分配角色");
		}
		
		return tbUser;
	}

	@Override
	public  MessageObject  updateUserByTbUser(TbUser tbUser) {
		MessageObject mo = new MessageObject();
		 mo.setCode(0);
		 mo.setMsg("修改失败");
		 
		 TbUser user = this.tbUserDubboService.selectUserById(tbUser.getId());
		 //电话唯一性验证
		 
		 
		 
		 if(tbUser.getPhone()!=null&&!tbUser.getPhone().equals(user.getPhone())) {
			 List<TbUser> listPhone = this.tbUserDubboService.selectUserByPhone(tbUser.getPhone());
			 if(listPhone!=null&&listPhone.size()>0) {
					 mo.setMsg("电话已经存在");
					 return mo;
			 }
		 }
		 //邮箱唯一性验证
		 if(tbUser.getEmail()!=null&&!tbUser.getEmail().equals(user.getEmail())) {
			 List<TbUser> listEmail = this.tbUserDubboService.selectUserByEmail(tbUser.getEmail());
			 if(listEmail!=null&&listEmail.size()>0) {
					 mo.setMsg("邮箱已经存在");
					 return mo;
			 }
		 }
		 
		 
		if(tbUser!=null) {
			if("".equals(tbUser.getPassword())||tbUser.getPassword()==null) {
				tbUser.setPassword(null);
			}else {
				String salt = UUID.randomUUID().toString().substring(0, 5);
			   	 Md5Hash md5Hash = new Md5Hash(tbUser.getPassword(), salt, 3);
			   	tbUser.setPassword(md5Hash.toString());
			   	tbUser.setSalt(salt);
			}
		}
		Date date = new Date();
		tbUser.setUpdated(date);
		int ok = tbUserDubboService.updateUserByTbUser(tbUser);
		if(ok==1) {
			mo.setCode(1);
			mo.setMsg("修改成功");
		}
		return mo;
	}

	@Override
	public int updateUserByIdsAndStatus(String ids, Integer status) {
		
		try {
			return tbUserDubboService.updateUserByIdsAndStatus(ids,status);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return 0;
		}
	}

	@Override
	public List<UserSuggestData> selectUserIdAndUserNameByAll() {
		 List<UserSuggestData> data = new ArrayList<UserSuggestData>(); 
		List<TbUser> list=tbUserDubboService.selectUserByAll();
		for (TbUser tbUser : list) {
			UserSuggestData userSuggestData = new UserSuggestData();
			userSuggestData.setUserId(tbUser.getId());
			userSuggestData.setUserName(tbUser.getUsername());
			data.add(userSuggestData);
		}
		
		return data;
	}

	@Override
	public UserMessage getUserMessageByUid(Long uid) {
		UserMessage userMessage = new UserMessage();
		TbUser tbuser = this.tbUserDubboService.selectUserById(uid);
		if(tbuser==null) {
			userMessage.setUsername("该用户已经被删除");
			return userMessage;
		}
		
		
		TbRole tbRole = this.tbRoleDubboService.selectRoleNameById(tbuser.getRoleId());
		
		String rolename="";
		if(tbRole==null) {
			rolename="还没分配角色";
		}else {
			rolename=tbRole.getRolename();
		}
		Long evaluateCount = tbEvaluateDubboService.selectEvaluateCountByUid(uid);
		userMessage.setEvaluateCount(evaluateCount);
		userMessage.setRolename(rolename);
		userMessage.setPhone(tbuser.getPhone());
		userMessage.setEmail(tbuser.getEmail());
		userMessage.setUsername(tbuser.getUsername());
		return userMessage;
	}

	@Override
	public UserMessage getUserMessageByOrderItemId(String orderItemId) {
		TbOrderShipping tbOrderShipping = tbOrderShippingDubboService.selectOrderShippingByShippingId(orderItemId);
		if(tbOrderShipping==null||tbOrderShipping.getStatus()!=ConstantObject.SendOrderItem) {
		  	return null;
		}
		return this.getUserMessageByUid(tbOrderShipping.getUid());
	}

	@Override
	public Map<String, Long> getPendingCountByUid() {
		Map<String, Long> map = new HashMap<String, Long>();
		TbUser user = (TbUser) SecurityUtils.getSubject().getPrincipal();
		Long shippingConut = this.tbOrderShippingDubboService.selectPendingOrderShippingByUid(user.getId());
		Long clientOrderItemCount = this.tbOrderItemDubboService.selectPendingClientOrderItemByClientId(user.getId());
		Long sellerOrderItemCount = this.tbOrderItemDubboService.selectPendingSellerOrderItemBySellerId(user.getId());
		map.put("shippingConut", shippingConut);
		map.put("clientOrderItemCount", clientOrderItemCount);
		map.put("sellerOrderItemCount", sellerOrderItemCount);
		return map;
	}

	@Override
	public boolean addCheckPhone(String phone) {
		List<TbUser> phoneUsers =  this.tbUserDubboService.selectUserByPhone(phone);
		if(phoneUsers==null||phoneUsers.size()==0) {
			return true;
		}
		return false;
	}

	@Override
	public boolean addCheckEmail(String email) {
		List<TbUser> emailUsers =  this.tbUserDubboService.selectUserByEmail(email);
		if(emailUsers==null||emailUsers.size()==0) {
			return true;
	}
	return false;
	}

	@Override
	public Map<String, String> selectAdmin() {
		TbRole role=tbRoleDubboService.selectRoleByRoleName("管理员");
		
		TbUser user = this.tbUserDubboService.selectTbUserByRoleId(role.getRoleId());
	Map<String, String> map = new HashMap<String, String>();
	map.put("phone", user.getPhone());
	map.put("mail",user.getEmail());
		return map;
	}

	@Override
	public MessageObject getMailCodeByEmail(String email,HttpServletRequest req) {
		HttpSession session = req.getSession();
		
		MessageObject mo = new MessageObject();
		mo.setCode(0);
		
		List<TbUser> selectUserByEmail = this.tbUserDubboService.selectUserByEmail(email);
		if(selectUserByEmail!=null&&selectUserByEmail.size()>0) {
		    mo.setMsg("邮箱已经注册过了");
			return mo;
		}
		String code = UUID.randomUUID().toString().substring(0, 4);
		
		try {
			SendEmail.send_email(email, "微购商城验证码", "验证码为:"+code+"请注意保管");
		} catch (Exception e) {
			e.printStackTrace();
			return mo;
		}
		
		session.setAttribute(email, code);
		mo.setCode(1);
		return mo;
	}

	@Override
	public MessageObject insertUserByTbUserAndverifyCode(TbUser user, String verifyCode,HttpServletRequest req) {
		MessageObject mo = new MessageObject();
		mo.setCode(0);
		if(user==null||verifyCode==null) {
			mo.setMsg("提交表单错误");
			return mo;
		}
		user.setRoleId(3l);
		user.setScore(30);
		
		HttpSession session = req.getSession();
		String code = (String) session.getAttribute(user.getEmail());
		
		if(!verifyCode.equals(code)) {
			mo.setMsg("验证码错误");
			return mo;
		}
		
		try {
			int ok = this.insertUserByIbUser(user);
		   if(ok==1) {
			   mo.setCode(1);
			   mo.setMsg("注册成功");
		   }else {
			   mo.setMsg("注册失败！系统出错");
		   }
			
		} catch (Exception e) {
			 mo.setMsg("注册失败！系统出错");
			// TODO Auto-generated catch block
			e.printStackTrace();
			
		}
		
		return mo;
	}

	@Override
	public MessageObject getMailCodeByEmailAndCheckEmail(String email, HttpServletRequest req) {
		MessageObject mo = new MessageObject();
		mo.setCode(0);
		List<TbUser> selectUserByEmail = this.tbUserDubboService.selectUserByEmail(email);
		if(selectUserByEmail==null||selectUserByEmail.size()==0) {
			mo.setMsg("该邮箱还没注册");
			return mo;
		}
       String code = UUID.randomUUID().toString().substring(0, 4);
       HttpSession session = req.getSession();
		try {
			SendEmail.send_email(email, "微购商城验证码", "验证码为:"+code+"请注意保管");
		} catch (Exception e) {
			e.printStackTrace();
			return mo;
		}
		
		session.setAttribute(email, code);
		mo.setCode(1);
		return mo;
	}

	@Override
	public MessageObject updateUserPassword(String email, String password, String verifyCode,HttpServletRequest req) {
		MessageObject mo = new MessageObject();
		mo.setCode(0);
		
		if(email==null||verifyCode==null||password==null) {
			mo.setMsg("请按要求填写表单");
			return mo;
		}
		
		List<TbUser> selectUserByEmail = this.tbUserDubboService.selectUserByEmail(email);
		if(selectUserByEmail==null||selectUserByEmail.size()==0) {
			mo.setMsg("该邮箱还没注册");
			return mo;
		}
		
		HttpSession session = req.getSession();
		String code = (String) session.getAttribute(email);
		if(!verifyCode.equals(code)) {
			mo.setMsg("验证码错误");
			return mo;
		}
		
		TbUser tbUser = selectUserByEmail.get(0);
		Date date = new Date();
	   	 Md5Hash md5Hash = new Md5Hash(password, tbUser.getSalt(), 3);
	   	tbUser.setPassword(md5Hash.toString());
	   	tbUser.setUpdated(date);
		
	   	int ok = this.tbUserDubboService.updateUserByTbUser(tbUser);
	   	if(ok==1) {
	   		mo.setCode(1);
	   		mo.setMsg("成功找回密码");
	   	}else {
	   		mo.setMsg("系统出错了");
	   	}
		return mo;
	}

	@Override
	public VisitorPage selectUserChartMessage(Date date) {
		
		System.out.println(date);
		
		VisitorPage visitorPage = new VisitorPage();
		Calendar calendar = new GregorianCalendar();
		calendar.setTime(date);
		calendar.set(Calendar.HOUR_OF_DAY, 0);
		calendar.set(Calendar.MINUTE, 0);
		calendar.set(Calendar.SECOND, 0);
		calendar.set(Calendar.DAY_OF_MONTH, calendar.get(Calendar.DAY_OF_MONTH)-7);
		
		List<VisitorPageMessage> visitorsTmp = new ArrayList<VisitorPageMessage>();
		for(int i=0;i<7;i++) {
			String key = calendar.get(Calendar.MONDAY)+1+"月"+calendar.get(Calendar.DAY_OF_MONTH)+"日";
			VisitorPageMessage v = new VisitorPageMessage();
			Long count = tbUserDubboService.selectUserChartMessage(calendar.getTime());
			v.setCount(count);
			v.setNamePage(key);
			visitorsTmp.add(v);
			calendar.set(Calendar.DAY_OF_MONTH, calendar.get(Calendar.DAY_OF_MONTH)+1);
		}
		visitorPage.setValues(visitorsTmp);
		return visitorPage;
	}

}
