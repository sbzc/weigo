package com.weigo.item.service.impl;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.shiro.SecurityUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.weigo.commons.pojo.ConstantObject;
import com.weigo.commons.pojo.MessageObject;
import com.weigo.commons.pojo.VisitorPage;
import com.weigo.dubbo.order.service.TbOrderItemDubboService;
import com.weigo.dubbo.shipping.service.TbOrderShippingDubboService;
import com.weigo.dubbo.user.service.TbUserDubboService;
import com.weigo.item.service.TbOrderItemService;
import com.weigo.mail.email.SendEmail;
import com.weigo.pojo.TbOrderItem;
import com.weigo.pojo.TbOrderShipping;
import com.weigo.pojo.TbUser;
@Service
public class TbOrderItemServiceImpl implements TbOrderItemService {

	@Autowired
	private TbOrderItemDubboService tbOrderItemDubboService;
	@Autowired
	private TbUserDubboService tbUserDubboService;
	@Autowired
	private TbOrderShippingDubboService tbOrderShippingDubboService;
	@Override
	public List<TbOrderItem> showOrderItemByclientId() {
		TbUser user = (TbUser) SecurityUtils.getSubject().getPrincipal();
 		
		return tbOrderItemDubboService.showOrderItemByclientId(user.getId());
	}
	@Override
	public MessageObject updateOrderItemStatusByTbOrderItem(TbOrderItem tbOrderItem) {
		
		TbUser user = (TbUser) SecurityUtils.getSubject().getPrincipal();
		
		if(tbOrderItem==null) {
			return null;
		}
		Date date = new Date();
		tbOrderItem.setUpdated(date);
		MessageObject mo = new MessageObject();
		mo.setCode(0);
		TbOrderItem beforeTbOrderItem=tbOrderItemDubboService.selectOredrItemByOrderItemId(tbOrderItem.getId());
		//if(beforeTbOrderItem==null) {
			//mo.setMsg("订单异常！无法操作");
		//}else 
		if(tbOrderItem.getStatus()==ConstantObject.refundOrderItem) {
			//退货 
			if(beforeTbOrderItem.getClientId().longValue()!=user.getId().longValue()) {
				mo.setMsg("你没有该订单操作权限");
			}else if(beforeTbOrderItem.getStatus()==ConstantObject.prepareSendOrderItem||beforeTbOrderItem.getStatus()==ConstantObject.resetOrderItem) {
				
				
				TbOrderShipping tbOrderShipping = new TbOrderShipping();
				tbOrderShipping.setOrderItemId(tbOrderItem.getId());
				tbOrderShipping.setUpdated(date);
				tbOrderShipping.setStatus(ConstantObject.refundOrderItem);
				int ok=0;
				try {
					ok=tbOrderItemDubboService.updateLogisticsByTbOrderItemAndOrderShipping(tbOrderItem, tbOrderShipping );
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
						
				if(ok==1) {
					mo.setCode(1);
					mo.setMsg("操作成功。待商家确认。。。");
					
					Map<String,String> map = new HashMap<String, String>();
					TbUser selectUserById = this.tbUserDubboService.selectUserById(beforeTbOrderItem.getSellerId());
					map.put("mail", selectUserById.getEmail());
					map.put("name", selectUserById.getUsername());
					map.put("title", beforeTbOrderItem.getTitle());
					new Thread() {
						public void run() {
							System.out.println("====子线程==");
								try {
									System.out.println("====子线程发送=="+map.get("mail"));
									SendEmail.send_email(map.get("mail"),map.get("name")+":客户申请退货", "<b>退货商品：<b>"+map.get("title")+"<br>请尽快处理。。。");
								} catch (Exception e) {
									// TODO Auto-generated catch block
									System.out.println(e.getMessage());
									e.printStackTrace();
								} 
							System.out.println("成功发送给："+map.get("name"));
							
							
						//	
						};
					}.start();
					
				}else {
					mo.setMsg("退货失败");
				}
			}else {
				mo.setMsg("退货失败！！");
				
			}
		}else if(tbOrderItem.getStatus()==ConstantObject.resetOrderItem){
			if(beforeTbOrderItem.getStatus()==ConstantObject.refundOrderItemSuccess) {
				mo.setMsg("商家已经确认退货！！可重新购买");
			}else
				if(beforeTbOrderItem.getClientId().longValue()!=user.getId().longValue()) {
					mo.setMsg("你没有该订单操作权限");
				}else if(beforeTbOrderItem.getStatus()==ConstantObject.refundOrderItem){
				int ok=tbOrderItemDubboService.updateOrderItemByTbOrderItem(tbOrderItem);
				if(ok==1) {
					mo.setCode(1);
					mo.setMsg("撤销退货成功");
				}else {
					mo.setMsg("撤销退货失败");
				}
			}
		}else if(tbOrderItem.getStatus()==ConstantObject.refundOrderItemSuccess) {
			
			if(beforeTbOrderItem.getSellerId().longValue()!=user.getId().longValue()) {
				mo.setMsg("你没有该订单操作权限");
			    }else
			   if(beforeTbOrderItem.getStatus()!=ConstantObject.SendOrderItem) {
				   
				TbOrderShipping tbOrderShipping = new TbOrderShipping();
				tbOrderShipping.setOrderItemId(tbOrderItem.getId());
				tbOrderShipping.setUid(0l);
				tbOrderShipping.setStatus(ConstantObject.refundOrderItemSuccess);
				tbOrderShipping.setUpdated(date);
				int ok=0;
				try {
					ok=tbOrderItemDubboService.updateLogisticsByTbOrderItemAndOrderShipping(tbOrderItem, tbOrderShipping );
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}//1812509082
				if(ok==1) {
					mo.setCode(1);
					mo.setMsg("商品退货成功");
					Map<String,String> map = new HashMap<String, String>();
					TbUser selectUserById = this.tbUserDubboService.selectUserById(beforeTbOrderItem.getClientId());
					map.put("mail", selectUserById.getEmail());
					map.put("name", selectUserById.getUsername());
					map.put("title", beforeTbOrderItem.getTitle());
					new Thread() {
						public void run() {
							System.out.println("====子线程==");
								try {
									System.out.println("====子线程发送=="+map.get("mail"));
									SendEmail.send_email(map.get("mail"),map.get("name")+":退货通知", "你购买的商品："+map.get("title")+"<br>:商家已经退款，你将不会收到商品");
								} catch (Exception e) {
									// TODO Auto-generated catch block
									System.out.println(e.getMessage());
									e.printStackTrace();
								} 
							System.out.println("成功发送给："+map.get("name"));
							
							
						//	
						};
					}.start();
					
					
				}else {
					mo.setMsg("商品退货失败");
				}
			}else {
				mo.setCode(0);
				mo.setMsg("快递员配送中。。。");
			}
		}else if(tbOrderItem.getStatus()==ConstantObject.finishOrderItem) {
			//确认收货
			if(beforeTbOrderItem.getClientId().longValue()!=user.getId().longValue()) {
				mo.setMsg("你没有该订单操作权限");
			}else if(beforeTbOrderItem.getStatus()==ConstantObject.signOnOrderItem) {
				
				
				
				int ok=0;
				
					ok = tbOrderItemDubboService.updateOrderItemByTbOrderItem(tbOrderItem);
				
				if(ok==1) {
					mo.setCode(1);
					mo.setMsg("商品已确认收货");
					   //给买家加分
						updateRole(user);
						//给快递员加分
						TbOrderShipping shipping = this.tbOrderShippingDubboService.selectOrderShippingByShippingId(tbOrderItem.getId());
						TbUser tbUser = tbUserDubboService.selectUserByUserId(shipping.getUid());
						updateRole(tbUser);
					
				}else {
					mo.setCode(0);
					mo.setMsg("操作失败");
				}
			}else {
				mo.setCode(0);
				mo.setMsg("操作失败");
			}
			
		}
		return mo;
	}
	@Override
	public List<TbOrderItem> selectSellerOrderItemListBySellerId() {
          TbUser user = (TbUser) SecurityUtils.getSubject().getPrincipal();
 		
		return tbOrderItemDubboService.selectOrderItemBySellerId(user.getId());

		
	}
	
	public void updateRole(TbUser user) {
		Date date = new Date();
		user.setUpdated(date);
		Integer tbds= user.getScore();
		int ds = tbds+1;
		if(ds<1) {
			ds=1;
		}else if(ds>50) {
			ds=50;
		}
		user.setScore(ds);
		user.setRoleId(ds/10l);
		tbUserDubboService.updateUserByTbUser(user);
	}
	@Override
	public List<VisitorPage> selectItemChartMessage() {
		// TODO Auto-generated method stub
		return null;
	}

}
