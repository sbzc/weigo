package com.weigo.admin.controller;

import java.util.List;
import java.util.Set;

import org.apache.shiro.SecurityUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.github.pagehelper.PageInfo;
import com.weigo.commons.pojo.MessageObject;
import com.weigo.manage.pojo.UserSuggest;
import com.weigo.manage.pojo.UserSuggestData;
import com.weigo.pojo.TbRole;
import com.weigo.pojo.TbUser;
import com.weigo.user.service.TbRoleService;
import com.weigo.user.service.TbUserService;

@Controller
public class AdminController {
	@Autowired
	private TbUserService tbUserService;
	@Autowired
	private TbRoleService tbRoleService;
	@Autowired
	private RedisTemplate<String, String> redisTemplate;
	@RequestMapping("/user/list")
	@ResponseBody
	public PageInfo<TbUser> showUserList(String keyword, @RequestParam(defaultValue = "updated") String sort,
			@RequestParam(defaultValue = "desc") String sortOrder, @RequestParam(defaultValue = "10") int pageSize,
			@RequestParam(defaultValue = "1") int pageNum) {
          SecurityUtils.getSubject().checkPermission("/user/list");
		PageInfo<TbUser> info = this.tbUserService.selectItemByKeyword(keyword, pageSize, pageNum, sort, sortOrder);
		return info;
	}

	@RequestMapping("/admin/user/userAdd")
	public String showUserAdd(Model model) {
		 SecurityUtils.getSubject().checkPermission("/user/userAdd");
		List<TbRole> list = tbRoleService.selectTbRoleByAll();
		model.addAttribute("roles", list);
		return "userAdd";
	}

	@RequestMapping("/admin/user/insert")
	@ResponseBody
	public MessageObject insertUser(TbUser tbUser) {
		 SecurityUtils.getSubject().checkPermission("user");
		MessageObject mo = new MessageObject();
		mo.setCode(0);
		mo.setMsg("添加失败");
		int row = 0;
		try {
			row = this.tbUserService.insertUserByIbUser(tbUser);
		} catch (Exception e) {
			mo.setMsg("请按要求填写表单！！");
			e.printStackTrace();
		}
		if (row == 1) {
			mo.setCode(1);
			mo.setMsg("添加成功");
		}
		return mo;
	}

	@RequestMapping("/admin/user/update")
	@ResponseBody
	public MessageObject updateUserByTbUser(TbUser tbUser) {
		 SecurityUtils.getSubject().checkPermission("user");
		MessageObject mo = new MessageObject();
		mo = this.tbUserService.updateUserByTbUser(tbUser);
		return mo;
	}

	// 管理员显示编辑的
	@RequestMapping("/admin/user/edit")
	public String showUserById(Model model, Long id) {
		SecurityUtils.getSubject().checkPermission("user");
		if (id == null) {
			return null;
		}
		TbUser user = tbUserService.selectUserById(id);
		model.addAttribute("user", user);
		model.addAttribute("roles", tbRoleService.selectTbRoleByAll());
		return "adminEditUser";
	}

	@RequestMapping("/user/updateStatus")
	@ResponseBody
	public MessageObject updateUserByIdsAndStatus(String ids, Integer status) {
		SecurityUtils.getSubject().checkPermission("user");
		String qs[] = new String[2];
		qs[0] = "禁用";
		qs[1] = "启用";
		MessageObject mo = new MessageObject();
		mo.setCode(0);
		mo.setMsg(qs[status] + "失败");
		int row = tbUserService.updateUserByIdsAndStatus(ids, status);
		if (row == 1) {
			mo.setCode(1);
			mo.setMsg(qs[status] + "成功");
		}
		return mo;
	}

	//搜索时自动补全用户名
	@RequestMapping("/user/suggest")
	@ResponseBody
	public UserSuggest getUserSuggest() {
		SecurityUtils.getSubject().checkPermission("user");
		UserSuggest userSuggest = new UserSuggest();
		userSuggest.setMessage("");
		List<UserSuggestData> value = tbUserService.selectUserIdAndUserNameByAll();

		userSuggest.setValue(value);
		return userSuggest;
	}
	
	@RequestMapping("/admin/redis/deleteAll")
	@ResponseBody
	public MessageObject deleteAllRedis() {
		MessageObject mo = new MessageObject();
		mo.setCode(1);
		mo.setMsg("清除成功");
		try {
			Set<String> keys = redisTemplate.keys("*");
			redisTemplate.delete(keys);
		} catch (Exception e) {
			// TODO: handle exception
			mo.setCode(0);
		    mo.setMsg("清除失败");
		}
		return mo;
	}
	
}
